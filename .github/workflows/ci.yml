name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Type check
        run: |
          echo "Checking core modules..."
          pnpm tsc --noEmit src/lib/db/**/*.ts
          pnpm tsc --noEmit src/lib/sync/**/*.ts
          pnpm tsc --noEmit src/lib/practice/**/*.ts
          echo "Checking all files..."
          pnpm type-check

      - name: Lint
        run: |
          echo "Linting core modules..."
          pnpm eslint src/lib/db/
          pnpm eslint src/lib/sync/
          pnpm eslint src/lib/practice/
          echo "Linting all files..."
          pnpm lint

      - name: Test
        run: |
          echo "Testing core modules..."
          pnpm jest src/lib/db/
          pnpm jest src/lib/sync/
          pnpm jest src/lib/practice/
          echo "Running all tests..."
          pnpm test:ci

      - name: Build
        run: pnpm build

  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Install dependencies
        run: pnpm install

      - name: Run security audit
        run: pnpm audit

      - name: Check for type safety
        run: |
          echo "Checking for any types..."
          pnpm tsc --noEmit --strict src/lib/**/*.ts
          echo "Checking for unsafe casts..."
          pnpm tsc --noEmit --strict --noImplicitAny src/lib/**/*.ts
 