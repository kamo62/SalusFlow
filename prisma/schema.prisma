// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  name          String
  idNumber      String    @unique @map("id_number")
  phone         String
  role          UserRole  @default(USER)
  status        UserStatus @default(ACTIVE)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  doctor        Doctor?
  practices     PracticeUser[]
  uploadedDocuments Document[]
  
  @@map("users")
  @@index([email])
  @@index([idNumber])
  @@index([role])
  @@index([status])
}

model Practice {
  id            String    @id @default(uuid())
  name          String
  registrationNumber String? @unique @map("registration_number")
  vatNumber     String?   @unique @map("vat_number")
  address       String
  phone         String
  email         String    @unique
  website       String?
  logo          String?
  settings      Json?     // Practice-specific settings like working hours, etc.
  users         PracticeUser[]
  doctors       Doctor[]
  patients      Patient[]
  appointments  Appointment[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  sharedPatientsFrom SharedPatientAccess[] @relation("SharedFrom")
  sharedPatientsTo   SharedPatientAccess[] @relation("SharedTo")
  practiceNumber String?   @unique @map("practice_number")
  bankDetails   Json?     // Bank account details for payments
  billingSettings Json?   // Billing preferences, invoice templates, etc.
  documents     Document[]
  feeSchedules  FeeSchedule[]

  @@map("practices")
  @@index([name])
  @@index([email])
  @@index([registrationNumber])
}

model PracticeUser {
  id            String    @id @default(uuid())
  userId        String
  practiceId    String
  role          PracticeRole @default(STAFF)
  user          User      @relation(fields: [userId], references: [id])
  practice      Practice  @relation(fields: [practiceId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([userId, practiceId])
  @@map("practice_users")
  @@index([userId])
  @@index([practiceId])
  @@index([role])
}

model Doctor {
  id                String    @id @default(uuid())
  userId            String    @unique
  practiceId        String
  user              User      @relation(fields: [userId], references: [id])
  practice          Practice  @relation(fields: [practiceId], references: [id])
  speciality        String
  hpcsa             String    @unique
  bhr               String?   @unique
  qualifications    String[]
  consultationTypes DoctorConsultationType[]
  appointments      Appointment[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@map("doctors")
  @@index([practiceId])
  @@index([speciality])
  @@index([userId])
  @@index([hpcsa])
  @@index([bhr])
}

model ConsultationType {
  id            String    @id @default(uuid())
  name          String
  description   String?
  durationMinutes Int     @default(30)
  practiceId    String
  doctors       DoctorConsultationType[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([name, practiceId])
  @@map("consultation_types")
  @@index([practiceId])
  @@index([durationMinutes])
}

model DoctorConsultationType {
  id               String    @id @default(uuid())
  doctorId         String
  consultationTypeId String
  fee              Decimal
  doctor           Doctor    @relation(fields: [doctorId], references: [id])
  consultationType ConsultationType @relation(fields: [consultationTypeId], references: [id])
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  @@unique([doctorId, consultationTypeId])
  @@map("doctor_consultation_types")
  @@index([doctorId])
  @@index([consultationTypeId])
  @@index([fee])
}

model Patient {
  id            String    @id @default(uuid())
  practiceId    String
  practice      Practice  @relation(fields: [practiceId], references: [id])
  firstName     String
  lastName      String
  idNumber      String    @map("id_number")
  dateOfBirth   DateTime
  gender        Gender
  email         String?
  phone         String
  address       String
  emergencyContact EmergencyContact?
  medicalAid    MedicalAid?
  appointments  Appointment[]
  medicalHistory MedicalHistory[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  consents       PatientConsent[]
  sharedAccess   SharedPatientAccess[]
  bloodType      BloodType?
  allergies      String[]
  chronicConditions String[]
  preferredLanguage String?
  occupation     String?
  maritalStatus  MaritalStatus?
  nationality    String?
  notes          String?
  documents     Document[]
  disabilities  String[]
  familyDoctor  String?   // External family doctor if any
  referredBy    String?
  referredDate  DateTime?
  lastVisit     DateTime?
  nextVisit     DateTime?
  communicationPreferences CommunicationPreference[]
  riskFactors   RiskFactor[]
  familyHistory FamilyHistory[]

  @@unique([email, practiceId])
  @@unique([idNumber, practiceId])
  @@map("patients")
  @@index([practiceId])
  @@index([firstName, lastName])
  @@index([idNumber])
  @@index([phone])
  @@index([dateOfBirth])
}

model EmergencyContact {
  id          String   @id @default(uuid())
  patientId   String   @unique
  patient     Patient  @relation(fields: [patientId], references: [id])
  name        String
  relationship String
  phone       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("emergency_contacts")
  @@index([patientId])
}

model MedicalAid {
  id              String   @id @default(uuid())
  patientId       String   @unique
  patient         Patient  @relation(fields: [patientId], references: [id])
  provider        String
  memberNumber    String
  planType        String
  principalMember String   @map("principal_member")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("medical_aids")
  @@index([patientId])
  @@index([provider])
  @@index([memberNumber])
}

model Appointment {
  id            String    @id @default(uuid())
  practiceId    String
  practice      Practice  @relation(fields: [practiceId], references: [id])
  patientId     String
  doctorId      String
  startTime     DateTime
  endTime       DateTime
  status        AppointmentStatus @default(SCHEDULED)
  notes         String?
  patient       Patient   @relation(fields: [patientId], references: [id])
  doctor        Doctor    @relation(fields: [doctorId], references: [id])
  consultation  Consultation?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("appointments")
  @@index([practiceId])
  @@index([patientId])
  @@index([doctorId])
  @@index([startTime, endTime])
  @@index([status])
}

model Consultation {
  id            String    @id @default(uuid())
  appointmentId String    @unique
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  notes         String?
  diagnoses     ConsultationDiagnosis[]
  procedures    ConsultationProcedure[]
  prescription  String?
  billingStatus BillingStatus @default(PENDING)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  documents     Document[]

  @@map("consultations")
  @@index([appointmentId])
  @@index([billingStatus])
}

model ConsultationDiagnosis {
  id            String    @id @default(uuid())
  consultationId String
  diagnosisId   String
  isPrimary     Boolean   @default(false)
  notes         String?
  consultation  Consultation @relation(fields: [consultationId], references: [id])
  diagnosis     DiagnosisCode @relation(fields: [diagnosisId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([consultationId, diagnosisId])
  @@map("consultation_diagnoses")
  @@index([consultationId])
  @@index([diagnosisId])
}

model ConsultationProcedure {
  id            String    @id @default(uuid())
  consultationId String
  procedureId   String
  bundleId      String?   // If part of a bundle
  quantity      Int       @default(1)
  notes         String?
  fee           Decimal
  modifiers     String[]  // Procedure modifiers (e.g., bilateral, assistant surgeon)
  consultation  Consultation @relation(fields: [consultationId], references: [id])
  procedure     ProcedureCode @relation(fields: [procedureId], references: [id])
  bundle        ProcedureBundle? @relation(fields: [bundleId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([consultationId, procedureId])
  @@map("consultation_procedures")
  @@index([consultationId])
  @@index([procedureId])
  @@index([bundleId])
}

model MedicalHistory {
  id            String    @id @default(uuid())
  patientId     String
  patient       Patient   @relation(fields: [patientId], references: [id])
  condition     String
  notes         String?
  diagnosedAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("medical_histories")
  @@index([patientId])
  @@index([condition])
  @@index([diagnosedAt])
}

model SyncLog {
  id            String    @id @default(uuid())
  practiceId    String
  tableName     String
  recordId      String
  operation     SyncOperation
  status        SyncStatus @default(PENDING)
  localChecksum String
  remoteChecksum String?
  conflictStatus ConflictStatus?
  resolutionType ResolutionType?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("sync_logs")
  @@index([practiceId])
  @@index([tableName])
  @@index([recordId])
  @@index([status])
  @@index([conflictStatus])
  @@index([createdAt])
}

model PatientConsent {
  id            String    @id @default(uuid())
  patientId     String
  patient       Patient   @relation(fields: [patientId], references: [id])
  consentType   ConsentType
  granted       Boolean   @default(false)
  validFrom     DateTime  @default(now())
  validUntil    DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("patient_consents")
  @@index([patientId])
  @@index([consentType])
  @@index([granted])
}

model SharedPatientAccess {
  id            String    @id @default(uuid())
  patientId     String
  sourcePracticeId String
  targetPracticeId String
  patient       Patient   @relation(fields: [patientId], references: [id])
  sourcePractice Practice @relation("SharedFrom", fields: [sourcePracticeId], references: [id])
  targetPractice Practice @relation("SharedTo", fields: [targetPracticeId], references: [id])
  accessLevel   PatientDataAccessLevel
  grantedAt     DateTime  @default(now())
  expiresAt     DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([patientId, sourcePracticeId, targetPracticeId])
  @@map("shared_patient_access")
  @@index([patientId])
  @@index([sourcePracticeId])
  @@index([targetPracticeId])
  @@index([accessLevel])
}

enum UserRole {
  SUPERADMIN    // Can manage all practices
  ADMIN         // Can manage specific practices
  DOCTOR
  USER
}

enum PracticeRole {
  OWNER         // Practice owner
  ADMIN         // Practice administrator
  DOCTOR        // Doctor in the practice
  STAFF         // General staff
  RECEPTIONIST  // Front desk
  BILLING       // Billing staff
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum SyncOperation {
  INSERT
  UPDATE
  DELETE
}

enum SyncStatus {
  PENDING
  COMPLETED
  FAILED
}

enum ConflictStatus {
  NONE
  DETECTED
  RESOLVED
}

enum ResolutionType {
  LOCAL_WINS
  REMOTE_WINS
  MANUAL
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

enum ConsentType {
  DATA_SHARING           // Consent to share data with other practices
  MARKETING             // Consent for marketing communications
  RESEARCH              // Consent for anonymized research data
  THIRD_PARTY_SHARING   // Consent to share with third parties (specialists, etc.)
}

enum PatientDataAccessLevel {
  BASIC          // Just demographic info
  MEDICAL        // Include medical history
  FULL           // Full access including notes and sensitive info
}

enum BloodType {
  A_POSITIVE
  A_NEGATIVE
  B_POSITIVE
  B_NEGATIVE
  O_POSITIVE
  O_NEGATIVE
  AB_POSITIVE
  AB_NEGATIVE
  UNKNOWN
}

enum MaritalStatus {
  SINGLE
  MARRIED
  DIVORCED
  WIDOWED
  SEPARATED
  OTHER
}

enum ProcedureType {
  CPT           // Current Procedural Terminology
  NAPPI         // National Pharmaceutical Product Index
  CUSTOM        // Practice-specific procedures
}

enum BillingStatus {
  PENDING       // Not yet billed
  BILLED        // Invoice generated
  SUBMITTED     // Submitted to medical aid
  PAID          // Payment received
  PARTIAL       // Partial payment received
  REJECTED      // Claim rejected
  CANCELLED     // Billing cancelled
}

model DiagnosisCode {
  id            String    @id @default(uuid())
  code          String    // ICD-10 code
  description   String
  category      String
  consultations ConsultationDiagnosis[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([code])
  @@map("diagnosis_codes")
  @@index([code])
  @@index([category])
}

model ProcedureCode {
  id            String    @id @default(uuid())
  code          String    // CPT/NAPPI code
  description   String
  category      String
  type          ProcedureType
  consultations ConsultationProcedure[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([code])
  @@map("procedure_codes")
  @@index([code])
  @@index([category])
  @@index([type])
}

model ProcedureBundle {
  id            String    @id @default(uuid())
  name          String
  description   String
  practiceId    String
  practice      Practice  @relation(fields: [practiceId], references: [id])
  procedures    BundleProcedure[]
  fee           Decimal   // Bundle price (can be different from sum of individual procedures)
  active        Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([name, practiceId])
  @@map("procedure_bundles")
  @@index([practiceId])
}

model BundleProcedure {
  id            String    @id @default(uuid())
  bundleId      String
  procedureId   String
  quantity      Int       @default(1)
  bundle        ProcedureBundle @relation(fields: [bundleId], references: [id])
  procedure     ProcedureCode @relation(fields: [procedureId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([bundleId, procedureId])
  @@map("bundle_procedures")
  @@index([bundleId])
  @@index([procedureId])
}

model Invoice {
  id            String    @id @default(uuid())
  practiceId    String
  practice      Practice  @relation(fields: [practiceId], references: [id])
  patientId     String
  patient       Patient   @relation(fields: [patientId], references: [id])
  consultationId String?
  consultation  Consultation? @relation(fields: [consultationId], references: [id])
  number        String    // Invoice number
  date          DateTime  @default(now())
  dueDate       DateTime
  subtotal      Decimal
  tax           Decimal
  total         Decimal
  status        InvoiceStatus @default(DRAFT)
  items         InvoiceItem[]
  payments      Payment[]
  notes         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  documents     Document[]

  @@unique([number, practiceId])
  @@map("invoices")
  @@index([practiceId])
  @@index([patientId])
  @@index([consultationId])
  @@index([status])
  @@index([date])
}

model InvoiceItem {
  id            String    @id @default(uuid())
  invoiceId     String
  invoice       Invoice   @relation(fields: [invoiceId], references: [id])
  description   String
  quantity      Int
  unitPrice     Decimal
  discount      Decimal   @default(0)
  tax           Decimal   @default(0)
  total         Decimal
  procedureId   String?
  procedure     ProcedureCode? @relation(fields: [procedureId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("invoice_items")
  @@index([invoiceId])
  @@index([procedureId])
}

model Payment {
  id            String    @id @default(uuid())
  invoiceId     String
  invoice       Invoice   @relation(fields: [invoiceId], references: [id])
  amount        Decimal
  method        PaymentMethod
  reference     String?   // Payment reference number
  date          DateTime  @default(now())
  notes         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("payments")
  @@index([invoiceId])
  @@index([method])
  @@index([date])
}

model AuditLog {
  id            String    @id @default(uuid())
  practiceId    String
  practice      Practice  @relation(fields: [practiceId], references: [id])
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  action        AuditAction
  entityType    String    // The type of entity being audited (e.g., "Patient", "Invoice")
  entityId      String    // The ID of the entity being audited
  oldData       Json?     // Previous state
  newData       Json?     // New state
  metadata      Json?     // Additional context
  ipAddress     String?
  userAgent     String?
  createdAt     DateTime  @default(now())

  @@map("audit_logs")
  @@index([practiceId])
  @@index([userId])
  @@index([action])
  @@index([entityType])
  @@index([entityId])
  @@index([createdAt])
}

enum InvoiceStatus {
  DRAFT
  ISSUED
  PARTIALLY_PAID
  PAID
  OVERDUE
  VOID
  BAD_DEBT
}

enum PaymentMethod {
  CASH
  CARD
  EFT
  MEDICAL_AID
  OTHER
}

enum AuditAction {
  LOGIN
  LOGOUT
  PASSWORD_CHANGE
  MFA_UPDATE

  CREATE
  READ
  UPDATE
  DELETE

  PRESCRIPTION_WRITE
  PRESCRIPTION_MODIFY
  DIAGNOSIS_ADD
  DIAGNOSIS_MODIFY
  
  INVOICE_CREATE
  INVOICE_MODIFY
  PAYMENT_RECORD
  PAYMENT_VOID
  
  APPOINTMENT_SCHEDULE
  APPOINTMENT_MODIFY
  PATIENT_REGISTER
  PATIENT_ARCHIVE
  
  DOCUMENT_UPLOAD
  DOCUMENT_ACCESS
  DOCUMENT_SHARE
  DOCUMENT_DELETE
  
  SHARE_INITIATE
  SHARE_ACCEPT
  SHARE_REVOKE
  
  EMAIL_SEND
  SMS_SEND
  
  REPORT_GENERATE
  DATA_EXPORT
  DATA_IMPORT
  
  SETTINGS_CHANGE
  USER_INVITE
  USER_SUSPEND
  BACKUP_CREATE
  RESTORE_EXECUTE
}

model FeeSchedule {
  id            String    @id @default(uuid())
  practiceId    String
  practice      Practice  @relation(fields: [practiceId], references: [id])
  name          String    // e.g., "Discovery Health 2024", "Private Rates 2024"
  year          Int
  isDefault     Boolean   @default(false)
  items         FeeScheduleItem[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([practiceId, name, year])
  @@map("fee_schedules")
  @@index([practiceId])
  @@index([year])
}

model FeeScheduleItem {
  id            String    @id @default(uuid())
  scheduleId    String
  schedule      FeeSchedule @relation(fields: [scheduleId], references: [id])
  procedureId   String
  procedure     ProcedureCode @relation(fields: [procedureId], references: [id])
  fee           Decimal
  modifierRules Json?     // Rules for fee modifications (e.g., {"bilateral": 1.5})
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([scheduleId, procedureId])
  @@map("fee_schedule_items")
  @@index([scheduleId])
  @@index([procedureId])
}

model Document {
  id            String    @id @default(uuid())
  practiceId    String
  practice      Practice  @relation(fields: [practiceId], references: [id])
  type          DocumentType
  category      DocumentCategory
  title         String
  description   String?
  fileUrl       String    // URL to stored file
  fileType      String    // MIME type
  fileSize      Int       // Size in bytes
  metadata      Json?     // Additional metadata
  patientId     String?
  patient       Patient?  @relation(fields: [patientId], references: [id])
  consultationId String?
  consultation  Consultation? @relation(fields: [consultationId], references: [id])
  invoiceId     String?
  invoice       Invoice?  @relation(fields: [invoiceId], references: [id])
  uploadedById  String
  uploadedBy    User      @relation(fields: [uploadedById], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("documents")
  @@index([practiceId])
  @@index([type])
  @@index([category])
  @@index([patientId])
  @@index([consultationId])
  @@index([invoiceId])
  @@index([uploadedById])
}

enum DocumentType {
  CLINICAL_NOTE
  PRESCRIPTION
  LAB_RESULT
  XRAY
  CONSENT_FORM
  REFERRAL
  SICK_NOTE
  INVOICE
  RECEIPT
  MEDICAL_AID_AUTH
  ID_DOCUMENT
  OTHER
}

enum DocumentCategory {
  MEDICAL         // Medical records, clinical notes
  ADMINISTRATIVE  // Forms, consents
  FINANCIAL       // Invoices, receipts
  IDENTIFICATION  // ID documents, medical aid cards
  COMMUNICATION   // Letters, referrals
  OTHER
}

model FamilyHistory {
  id            String    @id @default(uuid())
  patientId     String
  patient       Patient   @relation(fields: [patientId], references: [id])
  condition     String
  relationship  FamilyRelation
  diagnosedAge  Int?
  notes         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("family_histories")
  @@index([patientId])
  @@index([condition])
  @@index([relationship])
}

enum FamilyRelation {
  PARENT
  SIBLING
  CHILD
  GRANDPARENT
  AUNT_UNCLE
  COUSIN
  OTHER
}

enum CommunicationPreference {
  EMAIL
  SMS
  WHATSAPP
  PHONE_CALL
  POSTAL_MAIL
  NO_MARKETING
}

enum RiskFactor {
  SMOKING
  ALCOHOL
  OBESITY
  DIABETES
  HYPERTENSION
  HEART_DISEASE
  STROKE
  CANCER
  DEPRESSION
  ANXIETY
  SUBSTANCE_ABUSE
  PREGNANCY
  OTHER
} 